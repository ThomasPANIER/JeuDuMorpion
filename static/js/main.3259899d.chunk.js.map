{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","value","Board","i","this","squares","renderSquare","React","Component","Game","state","history","Array","fill","stepNumber","xIsNext","slice","length","calculateWinner","setState","concat","step","status","current","winner","moves","map","move","desc","jumpTo","handleClick","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"0NAIA,SAASA,EAAOC,GACZ,OACI,wBAAQC,UAAY,SAASC,QAAYF,EAAME,QAA/C,SACMF,EAAMG,Q,IAKdC,E,kKAEF,SAAaC,GAAI,IAAD,OACZ,OACI,cAACN,EAAD,CACII,MAAUG,KAAKN,MAAMO,QAAQF,GAC7BH,QAAY,kBAAM,EAAKF,MAAME,QAAQG,Q,oBAKjD,WACI,OACI,gCACI,sBAAKJ,UAAY,YAAjB,UACMK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,MAExB,sBAAKP,UAAY,YAAjB,UACMK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,MAExB,sBAAKP,UAAY,YAAjB,UACMK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,a,GA3BpBC,IAAMC,WAkCpBC,E,kDAEF,WAAYX,GAAQ,IAAD,8BACf,cAAMA,IACDY,MAAQ,CACTC,QAAS,CAAC,CAAEN,QAAUO,MAAM,GAAGC,KAAK,QACpCC,WAAa,EACbC,SAAU,GALC,E,+CASnB,SAAYZ,GACR,IAAMQ,EAAUP,KAAKM,MAAMC,QAAQK,MAAM,EAAGZ,KAAKM,MAAMI,WAAa,GAE9DT,EADUM,EAAQA,EAAQM,OAAS,GACjBZ,QAAQW,QAC5BE,EAAgBb,IAAYA,EAAQF,KAGxCE,EAAQF,GAAKC,KAAKM,MAAMK,QAAU,IAAM,IACxCX,KAAKe,SAAU,CAAER,QAAUA,EAAQS,OAAQ,CAAC,CAAEf,QAASA,KACnDS,WAAYH,EAAQM,OACpBF,SAAUX,KAAKM,MAAMK,a,oBAI7B,SAAOM,GACHjB,KAAKe,SAAU,CACbL,WAAYO,EACZN,QAAUM,EAAO,IAAO,M,oBAI9B,WAAU,IAYFC,EAZC,OACCX,EAAUP,KAAKM,MAAMC,QACrBY,EAAUZ,EAASP,KAAKM,MAAMI,YAC9BU,EAASN,EAAgBK,EAAQlB,SACjCoB,EAAQd,EAAQe,KAAK,SAACL,EAAMM,GAC9B,IAAMC,EAAOD,EAAO,yBAAwBA,EAAO,qBACnD,OACI,6BACI,wBAAQ3B,QAAY,kBAAM,EAAK6B,OAAOF,IAAtC,SAAiDC,KADzCD,MAYpB,OALIL,EADAE,EACSA,EAAS,cAGT,qBAAuBpB,KAAKM,MAAMK,QAAU,IAAM,KAG3D,sBAAKhB,UAAY,OAAjB,UACI,+CACA,qBAAKA,UAAY,aAAjB,SACI,cAACG,EAAD,CACIG,QAAYkB,EAAQlB,QACpBL,QAAY,SAACG,GAAD,OAAO,EAAK2B,YAAY3B,QAG5C,sBAAKJ,UAAY,YAAjB,UACI,oCAAQuB,EAAR,OACA,mCAAOG,EAAP,iB,GA9DDlB,IAAMC,WA4EzB,SAASU,EAAgBb,GAWrB,IAVA,IAAM0B,EAAQ,CACV,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEF5B,EAAI,EAAGA,EAAI4B,EAAMd,OAAQd,IAAK,CACnC,kBAAkB4B,EAAM5B,GAAxB,GAAO6B,EAAP,KAAUC,EAAV,KAAaC,EAAb,KACA,GAAI7B,EAAQ2B,IAAM3B,EAAQ2B,KAAO3B,EAAQ4B,IAAM5B,EAAQ2B,KAAO3B,EAAQ6B,GAClE,OAAO7B,EAAQ2B,GAGvB,OAAO,KAtBXG,IAASC,OACL,cAAC3B,EAAD,IACA4B,SAASC,eAAe,W","file":"static/js/main.3259899d.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nfunction Square(props) {\r\n    return (\r\n        <button className = \"square\" onClick = { props.onClick }>\r\n            { props.value }\r\n        </button>\r\n    );\r\n}\r\n\r\nclass Board extends React.Component {\r\n\r\n    renderSquare(i) {\r\n        return (\r\n            <Square\r\n                value = { this.props.squares[i] }\r\n                onClick = { () => this.props.onClick(i) }\r\n            />\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className = \"board-row\" >\r\n                    { this.renderSquare(0) }\r\n                    { this.renderSquare(1) }\r\n                    { this.renderSquare(2) }\r\n                </div>\r\n                <div className = \"board-row\" >\r\n                    { this.renderSquare(3) }\r\n                    { this.renderSquare(4) }\r\n                    { this.renderSquare(5) }\r\n                </div>\r\n                <div className = \"board-row\" >\r\n                    { this.renderSquare(6) }\r\n                    { this.renderSquare(7) }\r\n                    { this.renderSquare(8) }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Game extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            history :[{ squares : Array(9).fill(null) }],\r\n            stepNumber : 0,\r\n            xIsNext : true\r\n        };\r\n    }\r\n\r\n    handleClick(i) {\r\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n        const current = history[history.length - 1];\r\n        const squares = current.squares.slice();\r\n        if (calculateWinner(squares) || squares[i]) {\r\n            return;\r\n        }\r\n        squares[i] = this.state.xIsNext ? \"X\" : \"O\";\r\n        this.setState( { history : history.concat( [{ squares: squares }] ),\r\n            stepNumber: history.length,\r\n            xIsNext: !this.state.xIsNext\r\n        } );\r\n    }\r\n\r\n    jumpTo(step) {\r\n        this.setState( {\r\n          stepNumber: step,\r\n          xIsNext: (step % 2) === 0\r\n        } );\r\n      }\r\n\r\n    render() {\r\n        const history = this.state.history;\r\n        const current = history[ this.state.stepNumber ];\r\n        const winner = calculateWinner(current.squares);\r\n        const moves = history.map( (step, move) => {\r\n            const desc = move ? \"Revenir au tour n° \" + move : \"Rejouer une partie\";\r\n            return (\r\n                <li key = { move } >\r\n                    <button onClick = { () => this.jumpTo(move) } >{ desc }</button>\r\n                </li>\r\n            );\r\n        });\r\n        let status;\r\n        if (winner) {\r\n            status = winner + \" a gagné\";\r\n        }\r\n        else {\r\n            status = \"C'est le tour de \" + (this.state.xIsNext ? \"X\" : \"O\");\r\n        }\r\n        return (\r\n            <div className = \"game\" >\r\n                <p>Jeu du morpion</p>\r\n                <div className = \"game-board\" >\r\n                    <Board \r\n                        squares = { current.squares }\r\n                        onClick = { (i) => this.handleClick(i) }\r\n                    />\r\n                </div>\r\n                <div className = \"game-info\" >\r\n                    <div> { status } </div>\r\n                    <ol> { moves } </ol>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n    <Game />,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\nfunction calculateWinner(squares) {\r\n    const lines = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6]\r\n    ];\r\n    for (let i = 0; i < lines.length; i++) {\r\n        const [a, b, c] = lines[i];\r\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n            return squares[a];\r\n        }\r\n    }\r\n    return null;\r\n}\r\n"],"sourceRoot":""}